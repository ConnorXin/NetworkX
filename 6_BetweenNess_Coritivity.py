# -*- coding: utf-8 -*-
# @Author  :  connor
# @Time    :  2023/8/8 16:57
# @File    :  6_BetweenNess_Coritivity.py
# @IDE     :  PyCharm

"""
介数
核度
"""
import networkx as nx
import matplotlib.pyplot as plt


if __name__ == '__main__':

    # TODO 节点介数
    BA = nx.barabasi_albert_graph(20, 2)
    nodesBetweenness = nx.betweenness_centrality(BA)
    ''' 以字典形式存储各个节点的介数
    {0: 0.1729120781752361,
     1: 0.0532189058504848,
     2: 0.10204678362573098,
     3: 0.012130072656388446,
     4: 0.35916305916305913,
     5: 0.11451355661881978,
     6: 0.15852256904888481,
     7: 0.0,
     8: 0.06974253816359079,
     9: 0.007061846535530746,
     10: 0.16404521404521408,
     11: 0.0,
     12: 0.011308574466469202,
     13: 0.0,
     14: 0.007504873294346978,
     15: 0.009846586162375635,
     16: 0.005847953216374269,
     17: 0.0,
     18: 0.005068226120857699,
     19: 0.010225057593478646}
    '''

    # 获取介数最大的节点标签
    max_id = max(nodesBetweenness, key = nodesBetweenness.get)  # --> 4

    # 绘制网络
    nx.draw(BA, node_size = 500, with_labels = True)

    # TODO 边介数
    edgeBetweenness = nx.edge_betweenness_centrality(BA)
    '''以字典形式存储各个边的介数
    {(0, 1): 0.05412280701754385,
     (0, 2): 0.0699122807017544,
     (0, 3): 0.046052631578947366,
     (0, 4): 0.07969298245614036,
     (0, 6): 0.060526315789473685,
     (0, 13): 0.07057017543859649,
     (1, 3): 0.05732456140350876,
     (1, 8): 0.042675438596491234,
     (1, 9): 0.047938596491228065,
     (1, 19): 0.038114035087719295,
     (2, 5): 0.08368421052631578,
     (2, 6): 0.03947368421052632,
     (2, 10): 0.07578947368421053,
     (2, 15): 0.07298245614035088,
     (2, 16): 0.04710526315789474,
     (2, 17): 0.07596491228070175,
     (3, 4): 0.08539473684210527,
     (3, 5): 0.0544298245614035,
     (3, 11): 0.06293859649122809,
     (3, 18): 0.07675438596491227,
     (4, 7): 0.08890350877192982,
     (4, 8): 0.08074561403508772,
     (4, 9): 0.07021929824561404,
     (4, 12): 0.07008771929824562,
     (4, 14): 0.08140350877192983,
     (4, 16): 0.07166666666666667,
     (4, 19): 0.0688157894736842,
     (5, 7): 0.043991228070175435,
     (5, 12): 0.0437719298245614,
     (7, 11): 0.04188596491228071,
     (7, 13): 0.05521929824561403,
     (8, 15): 0.057192982456140344,
     (9, 10): 0.059999999999999984,
     (9, 14): 0.018596491228070174,
     (13, 17): 0.04859649122807017,
     (13, 18): 0.03114035087719298}
    '''

    # TODO 核度
    ks = nx.core_number(BA)
    '''
    {0: 2, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2,
     10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2,  19: 2}
     发现核度值都为2
     现在换一个网络求解核度试试
    '''

    # 换一个网络
    kcg = nx.karate_club_graph()  # 俱乐部网络
    ksKcg = nx.core_number(kcg)
    '''
    {0: 4, 1: 4, 2: 4, 3: 4, 4: 3, 5: 3, 6: 3, 7: 4, 8: 4, 9: 2, 10: 3, 11: 1, 12: 2, 13: 4, 14: 2,
     15: 2, 16: 2, 17: 2, 18: 2, 19: 3, 20: 2, 21: 2, 22: 2, 23: 3, 24: 3, 25: 3, 26: 2, 27: 3,
     28: 3, 29: 3, 30: 4, 31: 3, 32: 4, 33: 4}
    '''
    # 获取核度最大节点标签
    maxKs_id = max(ksKcg, key = ksKcg.get)  # --> 0
    # 绘制网络
    nx.draw(kcg, node_size=500, with_labels=True)

    # TODO 网络密度
    kcgDensity = nx.density(kcg)  # --> 0.13903743315508021
